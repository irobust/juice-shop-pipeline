---
# SPDX-License-Identifier: GPL-3.0-or-later
# (c) 2020-2024 Peter Mosmans [Go Forward]
#
# Detects whether outdated and insecure libraries are in use by running Dependency-Check.
#
# If the Dependency-Check suppression file exists, use it.
#
# Variables:
# CACHE_DIR              General cache directory
# DEPENDENCY_SUPPRESSION Suppression file for Dependency-Check
# DEPENDENCY_VERSION     Specifies which version of owasp/dependency-check is being used

# NVD_KEY                NVD API Key (optional)

dependency-check:
  # Ensure a "clean" scan environment
  variables:
    GIT_DEPTH: 1
    GIT_STRATEGY: clone
    DEPENDENCY_SUPPRESSION: "suppression.xml"
  extends: .security
  image:
    name: owasp/dependency-check:${DEPENDENCY_VERSION}
    entrypoint: [""]
  before_script:
    - mkdir -p reports &>/dev/null || true
    - mkdir -p ${CACHE_DIR}/dependency-check || true
  script:
    - >
      if [[ -f "${DEPENDENCY_SUPPRESSION}" ]] ; then
      EXTRA_PARMS="--suppression ${DEPENDENCY_SUPPRESSION}" ;
      else
      EXTRA_PARMS="" ;
      fi ;
      if [[ -n "${NVD_KEY}" ]]; then
      EXTRA_PARMS="${EXTRA_PARMS} --nvdApiKey ${NVD_KEY}";
      fi ;
      /usr/share/dependency-check/bin/dependency-check.sh
      --enableExperimental
      --exclude "**/*.tgz"
      --exclude "**/*.zip"
      --failOnCVSS 6
      --format HTML
      --format JSON
      --format SARIF
      --out reports
      --project ${CI_PROJECT_NAME}
      --data ${CACHE_DIR}/dependency-check
      --scan . ${EXTRA_PARMS}
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - reports/dependency-check-report.*
  # Only flag the job as failed, not the whole pipeline
  allow_failure: true
